
moh008_lab7_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e8  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081b  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002db  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000465  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000050  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2d d0       	rcall	.+90     	; 0x104 <main>
  aa:	3b c0       	rjmp	.+118    	; 0x122 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SPI_ServantInit>:
unsigned char tmpSPDR = 0x00;

void SPI_ServantInit(void)
{
	// set DDRB to have MISO Line as output and MOSI, SCK, and SS as input
	DDRB = (1<<PINB6);
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	84 b9       	out	0x04, r24	; 4
	// set SPCR register to enable SPI and enable SPI interrupt
	SPCR = (1<<SPE) | (1<<SPIE);
  b2:	80 ec       	ldi	r24, 0xC0	; 192
  b4:	8c bd       	out	0x2c, r24	; 44
	// make sure global interrupts are enabled on SREG register
	SREG = 0x80;
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	8f bf       	out	0x3f, r24	; 63
  ba:	08 95       	ret

000000bc <SPI_Transmit>:
}

void SPI_Transmit(unsigned char cData)
{
	SPDR = cData; //which line to transmit? servant photoresistor
  bc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF)));	//wait for tansmission to complete
  be:	0d b4       	in	r0, 0x2d	; 45
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <SPI_Transmit+0x2>
}
  c4:	08 95       	ret

000000c6 <__vector_19>:

unsigned char avg_cur = 0;
ISR(SPI_STC_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
	tmpSPDR = SPDR;
  d2:	8e b5       	in	r24, 0x2e	; 46
  d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpSPDR>
	
	if(tmpSPDR == 0x40)
  d8:	80 34       	cpi	r24, 0x40	; 64
  da:	21 f4       	brne	.+8      	; 0xe4 <__vector_19+0x1e>
	{
		avg_cur = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e2:	04 c0       	rjmp	.+8      	; 0xec <__vector_19+0x26>
	}
	else if(tmpSPDR == 0x20)
  e4:	80 32       	cpi	r24, 0x20	; 32
  e6:	11 f4       	brne	.+4      	; 0xec <__vector_19+0x26>
	{
		avg_cur = 0;
  e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <ADC_init>:
#include <avr/io.h>
#include "spi.h"

void ADC_init()
{
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 6e       	ori	r24, 0xE0	; 224
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <main>:
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 104:	11 b8       	out	0x01, r1	; 1
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	82 b9       	out	0x02, r24	; 2

	unsigned short newLightValue = 0x00;

	ADC_init();
 10a:	f6 df       	rcall	.-20     	; 0xf8 <ADC_init>
	SPI_ServantInit();
 10c:	d0 df       	rcall	.-96     	; 0xae <SPI_ServantInit>
 10e:	c8 e7       	ldi	r28, 0x78	; 120
	
	while (1) 
    {
		newLightValue = ADC;
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	28 81       	ld	r18, Y
 114:	39 81       	ldd	r19, Y+1	; 0x01
 116:	9e b5       	in	r25, 0x2e	; 46
		
		if(SPDR == 0x10)
 118:	90 31       	cpi	r25, 0x10	; 16
 11a:	d9 f7       	brne	.-10     	; 0x112 <main+0xe>
		{
			SPI_Transmit(newLightValue);
 11c:	82 2f       	mov	r24, r18
 11e:	ce df       	rcall	.-100    	; 0xbc <SPI_Transmit>
 120:	f8 cf       	rjmp	.-16     	; 0x112 <main+0xe>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>


moh008_lab7_part1_Microcontroller2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000030e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  000003ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d15  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b3  00000000  00000000  000011c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050e  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051e  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ed  00000000  00000000  000025da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000028c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d2 d0       	rcall	.+420    	; 0x268 <main>
  c4:	22 c1       	rjmp	.+580    	; 0x30a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

void SPI_Transmit(unsigned char cData)
{
	SPDR = cData; //which line to transmit? servant photoresistor
	while(!(SPSR &(1<<SPIF)));	//wait for tansmission to complete
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_init>:
 106:	84 e6       	ldi	r24, 0x64	; 100
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	de df       	rcall	.-68     	; 0xc8 <delay_ms>
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	ef df       	rcall	.-34     	; 0xee <LCD_WriteCommand>
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	ed df       	rcall	.-38     	; 0xee <LCD_WriteCommand>
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	eb df       	rcall	.-42     	; 0xee <LCD_WriteCommand>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	e9 df       	rcall	.-46     	; 0xee <LCD_WriteCommand>
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	d3 cf       	rjmp	.-90     	; 0xc8 <delay_ms>
 122:	08 95       	ret

00000124 <LCD_WriteData>:
 124:	5e 9a       	sbi	0x0b, 6	; 11
 126:	88 b9       	out	0x08, r24	; 8
 128:	5f 9a       	sbi	0x0b, 7	; 11
 12a:	00 00       	nop
 12c:	5f 98       	cbi	0x0b, 7	; 11
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ca cf       	rjmp	.-108    	; 0xc8 <delay_ms>
 134:	08 95       	ret

00000136 <LCD_Cursor>:
 136:	81 31       	cpi	r24, 0x11	; 17
 138:	18 f4       	brcc	.+6      	; 0x140 <LCD_Cursor+0xa>
 13a:	81 58       	subi	r24, 0x81	; 129
 13c:	d8 cf       	rjmp	.-80     	; 0xee <LCD_WriteCommand>
 13e:	08 95       	ret
 140:	81 55       	subi	r24, 0x51	; 81
 142:	d5 cf       	rjmp	.-86     	; 0xee <LCD_WriteCommand>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	ea df       	rcall	.-44     	; 0x136 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	df df       	rcall	.-66     	; 0x124 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 17c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 180:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 184:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 188:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 18c:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 190:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 194:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1c6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1d2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 1d6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1f8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1fc:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 200:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 20e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 212:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 216:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
 228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 22c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 230:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 234:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 238:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 23c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 240:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 244:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <SPI_ServantInit>:
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	84 b9       	out	0x04, r24	; 4
 25e:	80 ec       	ldi	r24, 0xC0	; 192
 260:	8c bd       	out	0x2c, r24	; 44
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	8f bf       	out	0x3f, r24	; 63
 266:	08 95       	ret

00000268 <main>:
#include "timer.h"
#include "spi.h"

int main(void)
{
	DDRC = 0xFF; PORTC = 0x00;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	87 b9       	out	0x07, r24	; 7
 26c:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 26e:	8a b9       	out	0x0a, r24	; 10
 270:	1b b8       	out	0x0b, r1	; 11
	
	
	SPI_ServantInit();
 272:	f3 df       	rcall	.-26     	; 0x25a <SPI_ServantInit>
	LCD_init();
 274:	48 df       	rcall	.-368    	; 0x106 <LCD_init>
	
	unsigned char hundred = 0;
	unsigned char ten = 0;
	unsigned char one = 0;
	
	TimerOn();
 276:	91 df       	rcall	.-222    	; 0x19a <TimerOn>
 278:	6c e2       	ldi	r22, 0x2C	; 44
	TimerSet(300);
 27a:	71 e0       	ldi	r23, 0x01	; 1
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	7b df       	rcall	.-266    	; 0x178 <TimerSet>
 282:	0d ec       	ldi	r16, 0xCD	; 205
	
    while (1)
    {
		hundred = SPDR/100;
		ten = SPDR / 10;
 284:	0f 2e       	mov	r0, r31
		ten = ten % 10;
		one = SPDR % 10;
		
		LCD_DisplayString(1, "Avg: ");
		LCD_Cursor(5);
		LCD_WriteData(hundred+'0');
 286:	f9 e2       	ldi	r31, 0x29	; 41
 288:	ff 2e       	mov	r15, r31
 28a:	f0 2d       	mov	r31, r0
 28c:	de b5       	in	r29, 0x2e	; 46
	TimerOn();
	TimerSet(300);
	
    while (1)
    {
		hundred = SPDR/100;
 28e:	ce b5       	in	r28, 0x2e	; 46
		ten = SPDR / 10;
 290:	c0 9f       	mul	r28, r16
 292:	c1 2d       	mov	r28, r1
 294:	11 24       	eor	r1, r1
 296:	c6 95       	lsr	r28
 298:	c6 95       	lsr	r28
 29a:	c6 95       	lsr	r28
 29c:	1e b5       	in	r17, 0x2e	; 46
		ten = ten % 10;
		one = SPDR % 10;
		
		LCD_DisplayString(1, "Avg: ");
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	71 e0       	ldi	r23, 0x01	; 1
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	50 df       	rcall	.-352    	; 0x146 <LCD_DisplayString>
		LCD_Cursor(5);
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	46 df       	rcall	.-372    	; 0x136 <LCD_Cursor>
 2aa:	df 9d       	mul	r29, r15
		LCD_WriteData(hundred+'0');
 2ac:	81 2d       	mov	r24, r1
 2ae:	11 24       	eor	r1, r1
 2b0:	82 95       	swap	r24
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	80 5d       	subi	r24, 0xD0	; 208
 2b6:	36 df       	rcall	.-404    	; 0x124 <LCD_WriteData>
		LCD_Cursor(6);
 2b8:	86 e0       	ldi	r24, 0x06	; 6
 2ba:	3d df       	rcall	.-390    	; 0x136 <LCD_Cursor>
 2bc:	c0 9f       	mul	r28, r16
		LCD_WriteData(ten+'0');
 2be:	91 2d       	mov	r25, r1
 2c0:	11 24       	eor	r1, r1
 2c2:	96 95       	lsr	r25
 2c4:	96 95       	lsr	r25
 2c6:	96 95       	lsr	r25
 2c8:	99 0f       	add	r25, r25
 2ca:	89 2f       	mov	r24, r25
 2cc:	88 0f       	add	r24, r24
 2ce:	88 0f       	add	r24, r24
 2d0:	98 0f       	add	r25, r24
 2d2:	8c 2f       	mov	r24, r28
 2d4:	89 1b       	sub	r24, r25
 2d6:	80 5d       	subi	r24, 0xD0	; 208
 2d8:	25 df       	rcall	.-438    	; 0x124 <LCD_WriteData>
		LCD_Cursor(7);
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	2c df       	rcall	.-424    	; 0x136 <LCD_Cursor>
 2de:	10 9f       	mul	r17, r16
		LCD_WriteData(one+'0');
 2e0:	91 2d       	mov	r25, r1
 2e2:	11 24       	eor	r1, r1
 2e4:	96 95       	lsr	r25
 2e6:	96 95       	lsr	r25
 2e8:	96 95       	lsr	r25
 2ea:	99 0f       	add	r25, r25
 2ec:	89 2f       	mov	r24, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	88 0f       	add	r24, r24
 2f2:	98 0f       	add	r25, r24
 2f4:	81 2f       	mov	r24, r17
 2f6:	89 1b       	sub	r24, r25
 2f8:	80 5d       	subi	r24, 0xD0	; 208
 2fa:	14 df       	rcall	.-472    	; 0x124 <LCD_WriteData>
 2fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
		while(!TimerFlag){}
 300:	88 23       	and	r24, r24
 302:	e1 f3       	breq	.-8      	; 0x2fc <main+0x94>
 304:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
			TimerFlag = 0;
 308:	c1 cf       	rjmp	.-126    	; 0x28c <main+0x24>

0000030a <_exit>:
    }
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
